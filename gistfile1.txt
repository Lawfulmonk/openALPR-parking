import cv2, sys, traceback
from PIL import Image
from openalpr import Alpr
import RPi.GPIO as GPIO
from time import sleep
import time

#setup GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(03, GPIO.OUT)
GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)
input_state = GPIO.input(18)
pwm = GPIO.PWM(03, 50)
pwm.start(0)
#######################
def SetAngle(angle):
    duty = angle / 18 + 2
    GPIO.output(03, True)
    pwm.ChangeDutyCycle(duty)
    sleep(1)
    GPIO.output(03, False)
    pwm.ChangeDutyCycle(0)
#######################
LEAST_CONFIDENCE = 70.0
MAX_NUM_PLATES = 5

alpr = Alpr("eu", "openalpr.conf", "/usr/share/openalpr/runtime_data")
if not alpr.is_loaded():
    print("Error loading OpenALPR")
    sys.exit(1)

alpr.set_top_n(1)
alpr.set_default_region("eu")

cap = cv2.VideoCapture(0)
try:
    # open and read whitelist file
    with open("whitelist.txt", "r") as file:
        white_list = [line.split()[0] for line in file]
    
    while (True):
        # Capture frame-by-frame
        ret, frame = cap.read()
        if not ret: continue
        # Our operations on the frame come here

        
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        ret,enc = cv2.imencode('*.jpg',gray)
        results = alpr.recognize_array(bytes(bytearray(enc)))
        found_plates = []
        for plate in results['results']:
            for candidate in plate['candidates']:
                if float(candidate['confidence']) > LEAST_CONFIDENCE and len(found_plates) < MAX_NUM_PLATES:
                    found_plates.append(str(candidate['plate']))
        if found_plates: print(found_plates)
        if any([plate in white_list for plate in found_plates]):
            #print("Access granted!")
            cv2.putText(gray, "Access granted!", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0,255,0))
            #open port
            SetAngle(150)
            sleep(10)
            #Close port
            SetAngle(80)
        else:
            #print("Access denied!")
            cv2.putText(gray, "Access denied!", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,0,0))

        # Display the resulting frame
        cv2.imshow('frame',gray)
        if cv2.waitKey(1) & 0xFF == ord('q'): break  # When everything done, release the capture
        
except Exception as ex:
    traceback.print_stack()
    print(ex)
#cleaner
cap.release()
alpr.unload()
cv2.destroyAllWindows()
pwm.stop()
GPIO.remove_event_detect(18)
GPIO.cleanup()
